module Top (
    input clk,              
    input rst, 
	 output [7:0] grayscale
);


parameter RAM_DEPTH = 30000;   
parameter RAM_WIDTH = 8;    


reg [RAM_WIDTH-1:0] memory [0:RAM_DEPTH-1];

reg output_valid;    
reg [7:0] address;
reg [7:0] address1;
reg [7:0] address2;
initial begin
address <= 8'b00000000;
address1 <= 8'b00000001;
address2 <= 8'b00000010;
output_valid <= 0;
end

reg [7:0] red,blue,green;
reg done;
wire doneo;



rgb_to_grayscale RGB_TO_GRAYSCALE(
	.clk(clk),
	.rst(rst),
	.red_i(red),
	.green_i(green),
	.blue_i(blue),
	.done_i(done),
	.grayscale_o(grayscale),
	.done_o(doneo) 
);

always @(posedge clk ) begin
    if (rst) begin
			address <= 8'b00000000;
			address1 <= 8'b00000001;
			address2 <= 8'b00000010;
         output_valid <= 0;
    end
    else begin
        /*state <= next_state;
        case(state)
            IDLE: begin
                next_state <= READ_FILE;
            end
            READ_FILE: begin
                $readmemh("text.txt", memory);
                next_state <= IDLE;
                output_valid <= 1;
            end
            default: begin
                output_valid <= 0;
            end
        endcase*/
	     $readmemh("lena.txt", memory);
		  address <= address +3;
		  address1 <= address1 +3;
		  address2 <= address2 +3;
		  output_valid <= 1;
    end
end

always @(posedge clk) begin
    if (output_valid) begin
        red = memory[address];
		  green = memory[address1];
		  blue = memory[address2];
		  done = 1;
    end
end



endmodule